/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package trading.marketdata.BetfairStreamAPI.swagger.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * MarketDataFilter
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-11-15T22:47:57.805+11:00")
public class MarketDataFilter   {
  @SerializedName("ladderLevels")
  private Integer ladderLevels = null;

  /**
   * Gets or Sets fields
   */
  public enum FieldsEnum {
    @SerializedName("EX_BEST_OFFERS_DISP")
    EX_BEST_OFFERS_DISP("EX_BEST_OFFERS_DISP"),
    
    @SerializedName("EX_BEST_OFFERS")
    EX_BEST_OFFERS("EX_BEST_OFFERS"),
    
    @SerializedName("EX_ALL_OFFERS")
    EX_ALL_OFFERS("EX_ALL_OFFERS"),
    
    @SerializedName("EX_TRADED")
    EX_TRADED("EX_TRADED"),
    
    @SerializedName("EX_TRADED_VOL")
    EX_TRADED_VOL("EX_TRADED_VOL"),
    
    @SerializedName("EX_LTP")
    EX_LTP("EX_LTP"),
    
    @SerializedName("EX_MARKET_DEF")
    EX_MARKET_DEF("EX_MARKET_DEF"),
    
    @SerializedName("SP_TRADED")
    SP_TRADED("SP_TRADED"),
    
    @SerializedName("SP_PROJECTED")
    SP_PROJECTED("SP_PROJECTED");

    private String value;

    FieldsEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("fields")
  private List<FieldsEnum> fields = new ArrayList<FieldsEnum>();

  public MarketDataFilter ladderLevels(Integer ladderLevels) {
    this.ladderLevels = ladderLevels;
    return this;
  }

   /**
   * Get ladderLevels
   * @return ladderLevels
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getLadderLevels() {
    return ladderLevels;
  }

  public void setLadderLevels(Integer ladderLevels) {
    this.ladderLevels = ladderLevels;
  }

  public MarketDataFilter fields(List<FieldsEnum> fields) {
    this.fields = fields;
    return this;
  }

  public MarketDataFilter addFieldsItem(FieldsEnum fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<FieldsEnum> getFields() {
    return fields;
  }

  public void setFields(List<FieldsEnum> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketDataFilter marketDataFilter = (MarketDataFilter) o;
    return Objects.equals(this.ladderLevels, marketDataFilter.ladderLevels) &&
        Objects.equals(this.fields, marketDataFilter.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ladderLevels, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketDataFilter {\n");
    
    sb.append("    ladderLevels: ").append(toIndentedString(ladderLevels)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

