/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package trading.marketdata.BetfairStreamAPI.swagger.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.RunnerDefinition;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;


/**
 * MarketDefinition
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-11-15T22:47:57.805+11:00")
public class MarketDefinition   {
  @SerializedName("venue")
  private String venue = null;

  @SerializedName("settledTime")
  private DateTime settledTime = null;

  @SerializedName("timezone")
  private String timezone = null;

  @SerializedName("eachWayDivisor")
  private Double eachWayDivisor = null;

  @SerializedName("regulators")
  private List<String> regulators = new ArrayList<String>();

  @SerializedName("marketType")
  private String marketType = null;

  @SerializedName("marketBaseRate")
  private Double marketBaseRate = null;

  @SerializedName("numberOfWinners")
  private Integer numberOfWinners = null;

  @SerializedName("countryCode")
  private String countryCode = null;

  @SerializedName("inPlay")
  private Boolean inPlay = null;

  @SerializedName("betDelay")
  private Integer betDelay = null;

  @SerializedName("bspMarket")
  private Boolean bspMarket = null;

  /**
   * Gets or Sets bettingType
   */
  public enum BettingTypeEnum {
    @SerializedName("ODDS")
    ODDS("ODDS"),
    
    @SerializedName("LINE")
    LINE("LINE"),
    
    @SerializedName("RANGE")
    RANGE("RANGE"),
    
    @SerializedName("ASIAN_HANDICAP_DOUBLE_LINE")
    ASIAN_HANDICAP_DOUBLE_LINE("ASIAN_HANDICAP_DOUBLE_LINE"),
    
    @SerializedName("ASIAN_HANDICAP_SINGLE_LINE")
    ASIAN_HANDICAP_SINGLE_LINE("ASIAN_HANDICAP_SINGLE_LINE");

    private String value;

    BettingTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("bettingType")
  private BettingTypeEnum bettingType = null;

  @SerializedName("numberOfActiveRunners")
  private Integer numberOfActiveRunners = null;

  @SerializedName("eventId")
  private String eventId = null;

  @SerializedName("crossMatching")
  private Boolean crossMatching = null;

  @SerializedName("runnersVoidable")
  private Boolean runnersVoidable = null;

  @SerializedName("turnInPlayEnabled")
  private Boolean turnInPlayEnabled = null;

  @SerializedName("suspendTime")
  private DateTime suspendTime = null;

  @SerializedName("discountAllowed")
  private Boolean discountAllowed = null;

  @SerializedName("persistenceEnabled")
  private Boolean persistenceEnabled = null;

  @SerializedName("runners")
  private List<RunnerDefinition> runners = new ArrayList<RunnerDefinition>();

  @SerializedName("version")
  private Long version = null;

  @SerializedName("eventTypeId")
  private String eventTypeId = null;

  @SerializedName("complete")
  private Boolean complete = null;

  @SerializedName("openDate")
  private DateTime openDate = null;

  @SerializedName("marketTime")
  private DateTime marketTime = null;

  @SerializedName("bspReconciled")
  private Boolean bspReconciled = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    @SerializedName("INACTIVE")
    INACTIVE("INACTIVE"),
    
    @SerializedName("OPEN")
    OPEN("OPEN"),
    
    @SerializedName("SUSPENDED")
    SUSPENDED("SUSPENDED"),
    
    @SerializedName("CLOSED")
    CLOSED("CLOSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public MarketDefinition venue(String venue) {
    this.venue = venue;
    return this;
  }

   /**
   * Get venue
   * @return venue
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }

  public MarketDefinition settledTime(DateTime settledTime) {
    this.settledTime = settledTime;
    return this;
  }

   /**
   * Get settledTime
   * @return settledTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getSettledTime() {
    return settledTime;
  }

  public void setSettledTime(DateTime settledTime) {
    this.settledTime = settledTime;
  }

  public MarketDefinition timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public MarketDefinition eachWayDivisor(Double eachWayDivisor) {
    this.eachWayDivisor = eachWayDivisor;
    return this;
  }

   /**
   * Get eachWayDivisor
   * @return eachWayDivisor
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getEachWayDivisor() {
    return eachWayDivisor;
  }

  public void setEachWayDivisor(Double eachWayDivisor) {
    this.eachWayDivisor = eachWayDivisor;
  }

  public MarketDefinition regulators(List<String> regulators) {
    this.regulators = regulators;
    return this;
  }

  public MarketDefinition addRegulatorsItem(String regulatorsItem) {
    this.regulators.add(regulatorsItem);
    return this;
  }

   /**
   * The market regulators.
   * @return regulators
  **/
  @ApiModelProperty(example = "null", value = "The market regulators.")
  public List<String> getRegulators() {
    return regulators;
  }

  public void setRegulators(List<String> regulators) {
    this.regulators = regulators;
  }

  public MarketDefinition marketType(String marketType) {
    this.marketType = marketType;
    return this;
  }

   /**
   * Get marketType
   * @return marketType
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getMarketType() {
    return marketType;
  }

  public void setMarketType(String marketType) {
    this.marketType = marketType;
  }

  public MarketDefinition marketBaseRate(Double marketBaseRate) {
    this.marketBaseRate = marketBaseRate;
    return this;
  }

   /**
   * Get marketBaseRate
   * @return marketBaseRate
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getMarketBaseRate() {
    return marketBaseRate;
  }

  public void setMarketBaseRate(Double marketBaseRate) {
    this.marketBaseRate = marketBaseRate;
  }

  public MarketDefinition numberOfWinners(Integer numberOfWinners) {
    this.numberOfWinners = numberOfWinners;
    return this;
  }

   /**
   * Get numberOfWinners
   * @return numberOfWinners
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getNumberOfWinners() {
    return numberOfWinners;
  }

  public void setNumberOfWinners(Integer numberOfWinners) {
    this.numberOfWinners = numberOfWinners;
  }

  public MarketDefinition countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public MarketDefinition inPlay(Boolean inPlay) {
    this.inPlay = inPlay;
    return this;
  }

   /**
   * Get inPlay
   * @return inPlay
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getInPlay() {
    return inPlay;
  }

  public void setInPlay(Boolean inPlay) {
    this.inPlay = inPlay;
  }

  public MarketDefinition betDelay(Integer betDelay) {
    this.betDelay = betDelay;
    return this;
  }

   /**
   * Get betDelay
   * @return betDelay
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getBetDelay() {
    return betDelay;
  }

  public void setBetDelay(Integer betDelay) {
    this.betDelay = betDelay;
  }

  public MarketDefinition bspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
    return this;
  }

   /**
   * Get bspMarket
   * @return bspMarket
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getBspMarket() {
    return bspMarket;
  }

  public void setBspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
  }

  public MarketDefinition bettingType(BettingTypeEnum bettingType) {
    this.bettingType = bettingType;
    return this;
  }

   /**
   * Get bettingType
   * @return bettingType
  **/
  @ApiModelProperty(example = "null", value = "")
  public BettingTypeEnum getBettingType() {
    return bettingType;
  }

  public void setBettingType(BettingTypeEnum bettingType) {
    this.bettingType = bettingType;
  }

  public MarketDefinition numberOfActiveRunners(Integer numberOfActiveRunners) {
    this.numberOfActiveRunners = numberOfActiveRunners;
    return this;
  }

   /**
   * Get numberOfActiveRunners
   * @return numberOfActiveRunners
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getNumberOfActiveRunners() {
    return numberOfActiveRunners;
  }

  public void setNumberOfActiveRunners(Integer numberOfActiveRunners) {
    this.numberOfActiveRunners = numberOfActiveRunners;
  }

  public MarketDefinition eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public MarketDefinition crossMatching(Boolean crossMatching) {
    this.crossMatching = crossMatching;
    return this;
  }

   /**
   * Get crossMatching
   * @return crossMatching
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getCrossMatching() {
    return crossMatching;
  }

  public void setCrossMatching(Boolean crossMatching) {
    this.crossMatching = crossMatching;
  }

  public MarketDefinition runnersVoidable(Boolean runnersVoidable) {
    this.runnersVoidable = runnersVoidable;
    return this;
  }

   /**
   * Get runnersVoidable
   * @return runnersVoidable
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getRunnersVoidable() {
    return runnersVoidable;
  }

  public void setRunnersVoidable(Boolean runnersVoidable) {
    this.runnersVoidable = runnersVoidable;
  }

  public MarketDefinition turnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
    return this;
  }

   /**
   * Get turnInPlayEnabled
   * @return turnInPlayEnabled
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getTurnInPlayEnabled() {
    return turnInPlayEnabled;
  }

  public void setTurnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
  }

  public MarketDefinition suspendTime(DateTime suspendTime) {
    this.suspendTime = suspendTime;
    return this;
  }

   /**
   * Get suspendTime
   * @return suspendTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getSuspendTime() {
    return suspendTime;
  }

  public void setSuspendTime(DateTime suspendTime) {
    this.suspendTime = suspendTime;
  }

  public MarketDefinition discountAllowed(Boolean discountAllowed) {
    this.discountAllowed = discountAllowed;
    return this;
  }

   /**
   * Get discountAllowed
   * @return discountAllowed
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getDiscountAllowed() {
    return discountAllowed;
  }

  public void setDiscountAllowed(Boolean discountAllowed) {
    this.discountAllowed = discountAllowed;
  }

  public MarketDefinition persistenceEnabled(Boolean persistenceEnabled) {
    this.persistenceEnabled = persistenceEnabled;
    return this;
  }

   /**
   * Get persistenceEnabled
   * @return persistenceEnabled
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getPersistenceEnabled() {
    return persistenceEnabled;
  }

  public void setPersistenceEnabled(Boolean persistenceEnabled) {
    this.persistenceEnabled = persistenceEnabled;
  }

  public MarketDefinition runners(List<RunnerDefinition> runners) {
    this.runners = runners;
    return this;
  }

  public MarketDefinition addRunnersItem(RunnerDefinition runnersItem) {
    this.runners.add(runnersItem);
    return this;
  }

   /**
   * Get runners
   * @return runners
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<RunnerDefinition> getRunners() {
    return runners;
  }

  public void setRunners(List<RunnerDefinition> runners) {
    this.runners = runners;
  }

  public MarketDefinition version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }

  public MarketDefinition eventTypeId(String eventTypeId) {
    this.eventTypeId = eventTypeId;
    return this;
  }

   /**
   * The Event Type the market is contained within.
   * @return eventTypeId
  **/
  @ApiModelProperty(example = "null", value = "The Event Type the market is contained within.")
  public String getEventTypeId() {
    return eventTypeId;
  }

  public void setEventTypeId(String eventTypeId) {
    this.eventTypeId = eventTypeId;
  }

  public MarketDefinition complete(Boolean complete) {
    this.complete = complete;
    return this;
  }

   /**
   * Get complete
   * @return complete
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getComplete() {
    return complete;
  }

  public void setComplete(Boolean complete) {
    this.complete = complete;
  }

  public MarketDefinition openDate(DateTime openDate) {
    this.openDate = openDate;
    return this;
  }

   /**
   * Get openDate
   * @return openDate
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getOpenDate() {
    return openDate;
  }

  public void setOpenDate(DateTime openDate) {
    this.openDate = openDate;
  }

  public MarketDefinition marketTime(DateTime marketTime) {
    this.marketTime = marketTime;
    return this;
  }

   /**
   * Get marketTime
   * @return marketTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getMarketTime() {
    return marketTime;
  }

  public void setMarketTime(DateTime marketTime) {
    this.marketTime = marketTime;
  }

  public MarketDefinition bspReconciled(Boolean bspReconciled) {
    this.bspReconciled = bspReconciled;
    return this;
  }

   /**
   * Get bspReconciled
   * @return bspReconciled
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getBspReconciled() {
    return bspReconciled;
  }

  public void setBspReconciled(Boolean bspReconciled) {
    this.bspReconciled = bspReconciled;
  }

  public MarketDefinition status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketDefinition marketDefinition = (MarketDefinition) o;
    return Objects.equals(this.venue, marketDefinition.venue) &&
        Objects.equals(this.settledTime, marketDefinition.settledTime) &&
        Objects.equals(this.timezone, marketDefinition.timezone) &&
        Objects.equals(this.eachWayDivisor, marketDefinition.eachWayDivisor) &&
        Objects.equals(this.regulators, marketDefinition.regulators) &&
        Objects.equals(this.marketType, marketDefinition.marketType) &&
        Objects.equals(this.marketBaseRate, marketDefinition.marketBaseRate) &&
        Objects.equals(this.numberOfWinners, marketDefinition.numberOfWinners) &&
        Objects.equals(this.countryCode, marketDefinition.countryCode) &&
        Objects.equals(this.inPlay, marketDefinition.inPlay) &&
        Objects.equals(this.betDelay, marketDefinition.betDelay) &&
        Objects.equals(this.bspMarket, marketDefinition.bspMarket) &&
        Objects.equals(this.bettingType, marketDefinition.bettingType) &&
        Objects.equals(this.numberOfActiveRunners, marketDefinition.numberOfActiveRunners) &&
        Objects.equals(this.eventId, marketDefinition.eventId) &&
        Objects.equals(this.crossMatching, marketDefinition.crossMatching) &&
        Objects.equals(this.runnersVoidable, marketDefinition.runnersVoidable) &&
        Objects.equals(this.turnInPlayEnabled, marketDefinition.turnInPlayEnabled) &&
        Objects.equals(this.suspendTime, marketDefinition.suspendTime) &&
        Objects.equals(this.discountAllowed, marketDefinition.discountAllowed) &&
        Objects.equals(this.persistenceEnabled, marketDefinition.persistenceEnabled) &&
        Objects.equals(this.runners, marketDefinition.runners) &&
        Objects.equals(this.version, marketDefinition.version) &&
        Objects.equals(this.eventTypeId, marketDefinition.eventTypeId) &&
        Objects.equals(this.complete, marketDefinition.complete) &&
        Objects.equals(this.openDate, marketDefinition.openDate) &&
        Objects.equals(this.marketTime, marketDefinition.marketTime) &&
        Objects.equals(this.bspReconciled, marketDefinition.bspReconciled) &&
        Objects.equals(this.status, marketDefinition.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(venue, settledTime, timezone, eachWayDivisor, regulators, marketType, marketBaseRate, numberOfWinners, countryCode, inPlay, betDelay, bspMarket, bettingType, numberOfActiveRunners, eventId, crossMatching, runnersVoidable, turnInPlayEnabled, suspendTime, discountAllowed, persistenceEnabled, runners, version, eventTypeId, complete, openDate, marketTime, bspReconciled, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketDefinition {\n");
    
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    settledTime: ").append(toIndentedString(settledTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    eachWayDivisor: ").append(toIndentedString(eachWayDivisor)).append("\n");
    sb.append("    regulators: ").append(toIndentedString(regulators)).append("\n");
    sb.append("    marketType: ").append(toIndentedString(marketType)).append("\n");
    sb.append("    marketBaseRate: ").append(toIndentedString(marketBaseRate)).append("\n");
    sb.append("    numberOfWinners: ").append(toIndentedString(numberOfWinners)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    inPlay: ").append(toIndentedString(inPlay)).append("\n");
    sb.append("    betDelay: ").append(toIndentedString(betDelay)).append("\n");
    sb.append("    bspMarket: ").append(toIndentedString(bspMarket)).append("\n");
    sb.append("    bettingType: ").append(toIndentedString(bettingType)).append("\n");
    sb.append("    numberOfActiveRunners: ").append(toIndentedString(numberOfActiveRunners)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    crossMatching: ").append(toIndentedString(crossMatching)).append("\n");
    sb.append("    runnersVoidable: ").append(toIndentedString(runnersVoidable)).append("\n");
    sb.append("    turnInPlayEnabled: ").append(toIndentedString(turnInPlayEnabled)).append("\n");
    sb.append("    suspendTime: ").append(toIndentedString(suspendTime)).append("\n");
    sb.append("    discountAllowed: ").append(toIndentedString(discountAllowed)).append("\n");
    sb.append("    persistenceEnabled: ").append(toIndentedString(persistenceEnabled)).append("\n");
    sb.append("    runners: ").append(toIndentedString(runners)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    eventTypeId: ").append(toIndentedString(eventTypeId)).append("\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    openDate: ").append(toIndentedString(openDate)).append("\n");
    sb.append("    marketTime: ").append(toIndentedString(marketTime)).append("\n");
    sb.append("    bspReconciled: ").append(toIndentedString(bspReconciled)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

